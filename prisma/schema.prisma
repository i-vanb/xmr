// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String?
//   password  String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   tests     Test[]
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?
  accounts      Account[]
  tests         Test[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}


model Test {
  id              String     @id @default(cuid())
  title           String
  description     String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions       Question[]
  isTimer         Boolean    @default(false)
  timerByQuestion Boolean    @default(false)
  timer           Int        @default(0)
  showRightAnswer Boolean    @default(false)
  showResults     Boolean    @default(false)
}

model Question {
  id          String   @id @default(cuid())
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  testId      String
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  answers     Answer[]
}

model Answer {
  id          String   @id @default(cuid())
  text        String
  isCorrect   Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
